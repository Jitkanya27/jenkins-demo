<project name="sample_ant" default="info" basedir=".">

  <property environment="env"/>

  <target name="info" description="Report environment information">
    <echo>java version is ${java.version}, runtime version is ${java.runtime.version}</echo>
    <echo>ant java version is ${ant.java.version}</echo>
    <echo>basedir is ${basedir}</echo>
    <echo>build file is ${ant.file}</echo>
    <echo>LANG=${env.LANG}</echo>
    <echo>LANGUAGE=${env.LANGUAGE}</echo>
    <echo>LC_ALL=${env.LC_ALL}</echo>
  </target>

  <property name="tmp" value="/tmp"/>
  <property name="var.tmp" value="/var/tmp"/>

  <hostinfo prefix="hostinfo"/>

  <target name="clean" description="Clean temporary files"
          depends="configure-my-system,check,clean-tmp,clean-var-tmp,clean-java-io-tmpdir,clean-env-TMP,clean-env-TEMP"/>

  <target name="configure-my-system">
    <copy todir="${user.home}">
      <fileset dir=".">
	<include name=".gitconfig"/>
	<!-- Don't overwrite an existing file -->
	<present present="srconly" targetdir="${user.home}"/>
      </fileset>
    </copy>
  </target>

  <target name="check-my-network">
    <echo>ADDR4=${hostinfo.ADDR4}</echo>
    <condition property="is.CA.network">
      <or>
        <matches string="${hostinfo.ADDR4}" pattern="^138\."/>
        <matches string="${hostinfo.ADDR4}" pattern="^10\."/>
      </or>
    </condition>
  </target>

  <target name="check-javac-location">
    <available property="javac.installed" file="/usr/bin/javac"/>
  </target>

  <!-- StackOverflow special thanks for this technique -->
  <scriptdef name="generateguid" language="javascript">
    <attribute name="property" />
    <![CDATA[project.setProperty( attributes.get( "property" ), java.util.UUID.randomUUID() );]]>
  </scriptdef>

  <target name="reboot" description="Reboot this computer">
    <tstamp>
      <format property="current.time" pattern="HH:mm"/>
    </tstamp>
    <tstamp>
      <!-- Schedule reboot 1 minute from now -->
      <format property="reboot.time" pattern="HH:mm" offset="2" unit="minute"/>
    </tstamp>
    <echo>It is ${current.time}, rebooting at ${reboot.time}</echo>
    <generateguid property="guid" />
    <exec osfamily="windows" executable="schtasks.exe" failonerror="true">
      <arg value="/Create"/>
      <arg value="/RU"/> <arg value="Reboot"/>
      <arg value="/RP"/> <arg value="Reboot$oon3nough"/>
      <arg value="/SC"/> <arg value="Once"/>
      <arg value="/ST"/> <arg value="${reboot.time}"/>
      <arg value="/TN"/> <arg value="Reboot-${guid}"/>
      <arg value="/TR"/> <arg value="shutdown /r /t 2"/>
    </exec>
  </target>

  <target name="check">
    <condition property="has.tmp">
      <available file="${tmp}" type="dir"/>
    </condition>
    <condition property="has.var.tmp">
      <available file="${var.tmp}" type="dir"/>
    </condition>
    <condition property="has.java.io.tmpdir">
      <available file="${java.io.tmpdir}" type="dir"/>
    </condition>
    <condition property="has.env.TMP">
      <available file="${env.TMP}" type="dir"/>
    </condition>
    <condition property="has.env.TEMP">
      <available file="${env.TEMP}" type="dir"/>
    </condition>
  </target>

  <target name="clean-tmp" description="Clean /tmp" if="${has.tmp}">
    <echo>Cleaning ${tmp}</echo>
    <delete includeemptydirs="true" failonerror="false" quiet="true">
      <fileset dir="${tmp}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean-var-tmp" description="Clean /var/tmp" if="${has.var.tmp}">
    <echo>Cleaning ${var.tmp}</echo>
    <delete includeemptydirs="true" failonerror="false" quiet="true">
      <fileset dir="${var.tmp}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean-java-io-tmpdir" description="Clean java tmp dir" if="${has.java.io.tmpdir}">
    <echo>Cleaning ${java.io.tmpdir}</echo>
    <delete includeemptydirs="true" failonerror="false" quiet="true">
      <fileset dir="${java.io.tmpdir}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean-env-TMP" description="Clean TMP" if="${has.env.TMP}">
    <echo>Cleaning ${env.TMP}</echo>
    <delete includeemptydirs="true" failonerror="false" quiet="true">
      <fileset dir="${env.TMP}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean-env-TEMP" description="Clean TEMP" if="${has.env.TEMP}">
    <echo>Cleaning ${env.TEMP}</echo>
    <delete includeemptydirs="true" failonerror="false" quiet="true">
      <fileset dir="${env.TEMP}" includes="**/*"/>
    </delete>
  </target>

</project>
